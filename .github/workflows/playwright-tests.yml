name: Playwright Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Test Environment'
        required: true
        default: 'QA'
        type: choice
        options:
          - QA
          - Staging
          - Production
      browser:
        description: 'Browser to run tests'
        required: true
        default: 'Chrome'
        type: choice
        options:
          - Chrome
          - Firefox
          - Safari
          - Edge
      test_suite:
        description: 'Test Suite to run'
        required: false
        default: 'all'
        type: string

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Install Playwright browsers
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install --with-deps
        
    - name: Create test directories
      run: |
        mkdir -p TestResults
        mkdir -p allure-results
        mkdir -p Logs
        
    - name: Run Playwright tests
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'QA' }}
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
      run: |
        dotnet test tests/PlaywrightFramework.Tests/PlaywrightFramework.Tests.csproj \
          --configuration Release \
          --logger "trx;LogFileName=test-results-${{ matrix.browser }}.trx" \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          -- TestRunParameters.Parameter\(name=Browser,value=${{ matrix.browser }}\)
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          TestResults/
          allure-results/
          Logs/
        retention-days: 30
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: screenshots-${{ matrix.browser }}
        path: TestResults/Screenshots/
        retention-days: 30

  allure-report:
    name: Generate Allure Report
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Combine allure results
      run: |
        mkdir -p combined-allure-results
        find artifacts/ -name "allure-results" -type d -exec cp -r {}/* combined-allure-results/ \;
        
    - name: Setup Java for Allure
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Install Allure
      run: |
        wget -O allure.zip https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.zip
        unzip allure.zip
        sudo mv allure-2.24.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
        
    - name: Generate Allure report
      run: |
        allure generate combined-allure-results --clean -o allure-report
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-report
        destination_dir: test-reports
        
    - name: Upload Allure report
      uses: actions/upload-artifact@v3
      with:
        name: allure-report
        path: allure-report/
        retention-days: 30

  notify:
    name: Notify Results
    needs: [test, allure-report]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Teams/Slack on failure
      if: failure()
      run: |
        echo "Tests failed! Check the results in the Actions tab."
        # Add your notification logic here (Teams, Slack, Email, etc.)
        
    - name: Create test summary
      if: always()
      run: |
        echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Browser | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Chromium | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Firefox | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| WebKit | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š [View Detailed Report](https://your-github-pages-url/test-reports)" >> $GITHUB_STEP_SUMMARY

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'performance'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Install Playwright browsers
      run: |
        dotnet tool install --global Microsoft.Playwright.CLI
        playwright install --with-deps chromium
        
    - name: Run performance tests
      run: |
        dotnet test tests/PlaywrightFramework.Tests/PlaywrightFramework.Tests.csproj \
          --configuration Release \
          --filter "Category=Performance" \
          --logger "trx;LogFileName=performance-results.trx"
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: TestResults/performance-results.trx 